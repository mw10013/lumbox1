{:enums
 {:Role
  {:description "Role of user."
   :values      [:USER :SUPPORT :ADMIN]}}
 :objects
 {:User                {:description "User"
                        :fields      {:id                 {:type (non-null ID)}
                                      :email              {:type        String
                                                           :description "Email of user."}
                                      :encrypted_password {:type        (non-null String)
                                                           :description "Encrypted password of user."}
                                      :roles              {:type        (non-null (list :Role))
                                                           :description "The roles of user."
                                                           :resolve     :User/roles}
                                      :first_name         {:type        String
                                                           :description "First name of user."}
                                      :last_name          {:type        String
                                                           :description "Last name of user."}
                                      :friends            {:type        (list :User)
                                                           :description "Friends of user."
                                                           :resolve     :User/friends}}}
  :RegisterUserPayload {:description "Register user payload."
                        :fields      {:user {:type (non-null :User)}}}
  :LoginPayload        {:description "Login payload."
                        :fields      {:user {:type (non-null :User)}}}
  :LogoutPayload       {:description "Logout payload."
                        :fields      {:user {:type (non-null :User)}}}}
 :input-objects
 {:RegisterUserInput {:fields {:email    {:type (non-null String)}
                               :password {:type (non-null String)}}}
  :LoginInput        {:fields {:email    {:type (non-null String)}
                               :password {:type (non-null String)}}}}
 :queries
 {:users            {:type        (list :User)
                     :description "Get all users."
                     :resolve     :query/users}
  :user_by_email    {:type        :User
                     :description "Select a user by its email, if it exists."
                     :args        {:email {:type (non-null String)}}
                     :resolve     :query/user-by-email}}
 :mutations
 {:upsert_user
  {:type        :User
   :description "Upsert a user."
   :args
                {:email      {:type (non-null String)}
                 :first_name {:type String}
                 :last_name  {:type String}}
   :resolve     :mutation/upsert-user}
  :delete_user_by_email
  {:type        String
   :description "Delete user by email."
   :args        {:email {:type (non-null String)}}
   :resolve     :mutation/delete-user-by-email}
  :register_user
  {:type        :RegisterUserPayload
   :description "Register user."
   :args        {:input {:type (non-null :RegisterUserInput)}}
   :resolve     :mutation/register-user}
  :login
  {:type        :LoginPayload
   :description "Login."
   :args        {:input {:type (non-null :LoginInput)}}
   :resolve     :mutation/login}
  :logout
  {:type        :LogoutPayload
   :description "Logout."
   :resolve     :mutation/logout}}}
